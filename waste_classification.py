# -*- coding: utf-8 -*-
"""Waste Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_AfEYQQEZjX7HoosUJ6JgHLKeaTmhWpo
"""

# ============================================================
# Waste Classification App - Baseline Version
# Streamlit + ResNet50 (Binary: Organic vs Recycling)
# ============================================================

import streamlit as st
import torch
import torch.nn as nn
from torchvision import models, transforms as T
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

# =============================
# Title & description
# =============================
st.title("‚ôªÔ∏è Waste Classification App")
st.markdown("Upload an image to classify it as **Organic (O)** or **Recycling (R)** using ResNet50 üöÄ")

# =============================
# Model setup
# =============================
@st.cache_resource
def load_model():
    # Load pretrained ResNet50 (ImageNet) and adjust final layer for 2 classes
    model = models.resnet50(weights=models.ResNet50_Weights.IMAGENET1K_V2)
    model.fc = nn.Linear(model.fc.in_features, 2)
    model.eval()
    return model

model = load_model()

# =============================
# Transformations
# =============================
transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
])

# Class labels
idx_to_class = {0: "O (Organic)", 1: "R (Recycling)"}

# =============================
# File uploader
# =============================
uploaded_file = st.file_uploader("üìÇ Upload a waste image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Show uploaded image
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="Uploaded Image", use_column_width=True)

    # Preprocess image
    inp = transform(img).unsqueeze(0)

    # Run prediction
    with torch.no_grad():
        outputs = model(inp)
        probs = torch.softmax(outputs, dim=1).numpy()[0]

    pred_class = idx_to_class[int(np.argmax(probs))]

    # =============================
    # Show results
    # =============================
    st.subheader(f"üßæ Prediction: {pred_class}")
    st.write(f"Confidence (Organic): {probs[0]:.4f}")
    st.write(f"Confidence (Recycling): {probs[1]:.4f}")

    # Plot confidence bar
    fig, ax = plt.subplots()
    ax.bar(idx_to_class.values(), probs, color=["green", "blue"])
    ax.set_ylim([0, 1])
    ax.set_ylabel("Confidence")
    st.pyplot(fig)





